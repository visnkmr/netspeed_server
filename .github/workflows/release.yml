name: Rust CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # os: [windows-latest, macos-latest, ubuntu-latest]
        os: [windows-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: Swatinem/rust-cache@v2.2.1
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Install
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install -y musl-tools cmake libxft-dev libxinerama-dev libxcursor-dev libxfixes-dev libpango1.0-dev libpangoxft-1.0-0 libpangocairo-1.0-0 libssl-dev
    - name: Build
      env:
        RUST_BACKTRACE: 1
      run: cargo build --release
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y_%m_%dT%H_%M')"
    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-binary.exe
        path: target/release/ns_sse.exe
  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          path: target/release/
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     draft: false
      #     prerelease: false
      - name: Publish
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.date.outputs.date }}
          name: ${{ steps.date.outputs.date }}
          draft: false
          prerelease: false
          body: |
            - ${{ github.event.head_commit.message }} ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      # - name: Upload Linux binary
      #   uses: actions/upload-release-asset@v3
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: target/release/perlink*
      #     asset_name: perlink_linux_amd64
      #     asset_content_type: application/octet-stream
      - name: Upload Windows binary
        uses: actions/upload-release-asset@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/release/ns_sse.exe
          asset_name: ns_sse_windows_amd64.exe
          asset_content_type: application/octet-stream